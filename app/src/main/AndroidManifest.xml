<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-feature android:name="android.hardware.telephony" />

    <!--
    Will need this once we go to app level 30 or 31.  These limit what other apps are installed
    and what our app is allowed to see.  This explicitly tells the OS that we want to interact
    with these other packages/intents/etc.
    Without this, we may not be able to receive Intents that tell us if a sent TXT message
    succeeded or the target phone received the TXT message.
    <queries>
        <intent>
            <action android:name="android.intent.action.SENDTO" />
            <data android:scheme="smsto"/>
        </intent>
    </queries>
    -->

    <!-- Required, no need to ask for permission, get them "for free" by declaring them here. -->
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
    <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />
    <uses-permission android:name="android.permission.VIBRATE" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE_SPECIAL_USE"/>

    <!-- User has to grant these explicitly.  Found in PermissionsScreen. -->
    <uses-permission android:name="android.permission.READ_CONTACTS" />
    <uses-permission android:name="android.permission.SEND_SMS" />
    <uses-permission android:name="android.permission.CALL_PHONE" />


    <!--
        So we can bring the app to the foreground when not running or backgrounded.
        See https://developer.android.com/guide/components/activities/background-starts for details
        about this.  You can't ask the user for this permission, but you can tell them they don't
        have it enabled and direct them where in the app's settings (from the OS) to turn it on.
    -->
    <uses-permission
        android:name="android.permission.SYSTEM_ALERT_WINDOW" />

    <application
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:name=".MyApplication"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AreYouOK"
        tools:targetApi="29">

        <activity
            android:name="MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:theme="@style/Theme.AreYouOK">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <receiver android:name=".alarms.RuokAlarmReceiver" />

        <!--
            Unlike other receivers, this has to be exported so the telephony system can send it
            intents.  When a TXT message is sent, we send a PendingIntent asking SMS to call us
            back when certain things happen, like sending the text message and if the other phone
            received the TXT message.
         -->
        <receiver
            android:name=".messaging.AlertErrorHandler"
            android:exported="true" />

        <service
            android:name=".movement.MovementService"
            android:foregroundServiceType="specialUse"
            android:exported="false">
            <property
                android:name="android.app.PROPERTY_SPECIAL_USE_FGS_SUBTYPE"
                android:value="Collect accelerometer data to detect if user is in trouble and needs attention" />
        </service>

    </application>

</manifest>
